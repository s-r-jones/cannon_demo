#import <lights>
#import <color_spaces>
#define time std::getTime()
#define res std::getRenderTargetSize()

precision highp float;                   
 
struct PhongMaterialParameters {
    vec3 emission;
    vec3 ambientFactor;
    vec3 diffuseFactor;
    vec3 specularFactor;
    vec3 worldPos;
    float shininess;
    float occlusion;
};

float random (in vec2 uv) {
    return fract(sin(dot(uv.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

float fbm (in vec2 uv) {
    float value = 0.0;
    float amplitude = .5;
    float frequency = 0.;

    for (int i = 0; i < 6; i++) {
        value += amplitude * noise(uv);
        uv *= 2.;
        amplitude *= .5;
    }
    return value;
}

#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))
#define hash(p) fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123)

float noise (vec3 p) {
    vec3 i = floor(p);
    vec3 f = fract(p); f = f*f*(3.-2.*f); // smoothstep

    float v= mix( mix( mix(hash(i+vec3(0,0,0)),hash(i+vec3(1,0,0)),f.x),
                       mix(hash(i+vec3(0,1,0)),hash(i+vec3(1,1,0)),f.x), f.y), 
                  mix( mix(hash(i+vec3(0,0,1)),hash(i+vec3(1,0,1)),f.x),
                       mix(hash(i+vec3(0,1,1)),hash(i+vec3(1,1,1)),f.x), f.y), f.z);
	return 2.*v-1.;//v;
	      //2.*v-1.
          //abs(2.*v-1.)
                    //1.-abs(2.*v-1.);
}

float fbm3 (vec3 p) {
    float v = 0.,  a = .5;
    mat2 R = rot(.37 + time/1e4);

    for (int i = 0; i < 9; i++, p*=2.,a/=2.) 
        p.xy *= R, p.yz *= R,
        v += a * noise(p);

    return v;
}




vec3 applyPhong(
    std::LightData light,
    vec3 normal,
    vec3 view,
    PhongMaterialParameters material) {
    vec3 reflected = -reflect(light.toLightDirection, normal);

    float LdotN = dot(light.toLightDirection, normal);
    float RdotV = max(dot(reflected, view), 0.0);

    float diffuseFactor = max(LdotN, 0.0);
    vec3 diffuse = material.diffuseFactor * (light.intensity * diffuseFactor);

    float specularFactor = pow(RdotV, material.shininess) * step(0.0, LdotN); // do not light backface
    vec3 specular = material.specularFactor * (light.intensity * specularFactor);

    return material.occlusion * diffuse + specular;
}

// A material that uses the Phong shading model.
//
// @param [default=1.0, min=1.0, max=10.0] uvScale
// @param [default=0.0, min=0.0, max=100.0] smoothness
void main(optional<std::Texture2d> diffuseTexture,
           optional<std::Texture2d> normalTexture,
           optional<std::Texture2d> specularTexture,
           optional<std::Texture2d> emissiveTexture,
           float smoothness,
           float uvScale,
           out vec4 Position,
           out vec4 Color) {
                   
    // non-linear mapping from [0,100] to [1,100]
     float shininess = mix(1.0, 100.0, pow(smoothness * 0.01, 2.0)); 

    // Attributes
    vec2 uv = std::getVertexTexCoord();
    optional<vec3> sampledNormal = normalize(std::getTangentFrame() * normalTexture.sample(uv).xyz * 2.0 - 1.0);
    vec3 localNormal = sampledNormal.valueOr(std::getVertexNormal());
    vec4 localPosition = std::getVertexPosition();

    // Material parameters
    vec4 diffuseAndOpacity = diffuseTexture.sample(uv).valueOr(vec4(1.0));
    vec4 specularAndShininess = specularTexture.sample(uv).valueOr(vec4(1.0));
    PhongMaterialParameters material;
    material.emission = emissiveTexture.sample(uv).rgb.valueOr(vec3(0.0));
    material.ambientFactor = diffuseAndOpacity.rgb;
    material.diffuseFactor = diffuseAndOpacity.rgb;
    material.specularFactor = specularAndShininess.rgb;
    material.shininess = clamp(specularAndShininess.a * shininess, 1.0, 100.0);
    material.occlusion = 1.0;

    // Screen-space position
    Position = std::getModelViewProjectionMatrix() * localPosition;
    vec2 fragCoord = fragment(Position.xy / Position.w);
    fragCoord = fragCoord * 0.5 + 0.5;

    // world space position
    vec4 wsPos = std::getModelMatrix() * localPosition;

    vec3 col = .5 * .5 + cos(time + 10.0 * fbm(uv * uvScale * atan(3.0))+ vec3(0,23,21));

    col *= fbm(uv * atan(5.0));

    // Camera-space normal, position, and view
    vec3 csNormal = normalize(fragment(std::getNormalMatrix() * localNormal));
    vec4 csPosition = fragment(std::getModelViewMatrix() * localPosition); 
    vec3 csView = normalize(-csPosition.xyz); // csCamera is at vec3(0,0,0)

    // color
    col += material.emission + material.ambientFactor * std::getAmbientLight().rgb;
    if (std::getActiveLightCount() > 0) col += applyPhong(std::getLightData0(csPosition.xyz), csNormal, csView, material);
    if (std::getActiveLightCount() > 1) col += applyPhong(std::getLightData1(csPosition.xyz), csNormal, csView, material);
    if (std::getActiveLightCount() > 2) col += applyPhong(std::getLightData2(csPosition.xyz), csNormal, csView, material);
    if (std::getActiveLightCount() > 3) col += applyPhong(std::getLightData3(csPosition.xyz), csNormal, csView, material);





    Color = vec4(col, diffuseAndOpacity.a);
}
